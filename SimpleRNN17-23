import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, SimpleRNN
from tensorflow.keras.optimizers import Adam
import matplotlib.pyplot as plt


close_data = data['Close'].values.reshape(-1, 1)

scaler = MinMaxScaler(feature_range=(0, 1))
close_scaled = scaler.fit_transform(close_data)

def create_dataset(dataset, time_step=1):
    X, y = [], []
    for i in range(len(dataset) - time_step - 1):
        a = dataset[i:(i + time_step), 0]
        X.append(a)
        y.append(dataset[i + time_step, 0])
    return np.array(X), np.array(y)

time_step = 10
X, y = create_dataset(close_scaled, time_step)

train_size = int(len(X) * 0.67)
test_size = len(X) - train_size
X_train, X_test = X[:train_size], X[train_size:]
y_train, y_test = y[:train_size], y[train_size:]

X_train = X_train.reshape(X_train.shape[0], time_step, 1)
X_test = X_test.reshape(X_test.shape[0], time_step, 1)

model = Sequential([
    SimpleRNN(50, return_sequences=True, input_shape=(time_step, 1)),
    SimpleRNN(50, return_sequences=False),
    Dense(1)
])

model.compile(optimizer=Adam(0.01), loss='mean_squared_error')

model.fit(X_train, y_train, epochs=100, batch_size=64, validation_data=(X_test, y_test), verbose=1)

train_predict = model.predict(X_train)
test_predict = model.predict(X_test)

train_predict = scaler.inverse_transform(train_predict)
test_predict = scaler.inverse_transform(test_predict)

train_rmse = np.sqrt(np.mean((train_predict - scaler.inverse_transform(y_train.reshape(-1, 1)))**2))
test_rmse = np.sqrt(np.mean((test_predict - scaler.inverse_transform(y_test.reshape(-1, 1)))**2))
print(f"train RMSE: {train_rmse}")
print(f'test RMSE: {test_rmse}")

plt.figure(figsize=(15, 6))
plt.plot(scaler.inverse_transform(close_scaled))
plt.plot(np.arange(time_step, len(train_predict)+time_step), train_predict, label='Train Predict')
plt.plot(np.arange(len(train_predict)+(time_step*2)+1, len(train_predict)+(time_step*2)+len(test_predict)+1), test_predict, label='Test Predict')
plt.title('Prediction')
plt.xlabel('time')
plt.ylabel('close price')
plt.legend()
plt.show()
